{
    "version": "https://jsonfeed.org/version/1",
    "title": "Edward Jensen",
    "description": "Edward Jensen is a nonprofit technology professional who writes about the intersection of technology and the nonprofit sector.",
    "home_page_url": "https://www.edwardjensen.net/",
    "feed_url": "https://www.edwardjensen.net/feed.json",
    "items": [
      {
            "id": "https://www.edwardjensen.net/posts/2025/2025-02/incorporating-old-posts",
            "url": "https://www.edwardjensen.net/posts/2025/2025-02/incorporating-old-posts",
            "title": "Site meta: Incorporating Old Posts",
            "content_html": "<p>One of the challenges I’ve experienced when creating the new software stack for my website/blog is how to import content over. WordPress, the previous hosting system, handled everything in a database and then did exports in XML. Jekyll, the new home for this site, handles everything in individual Markdown files. And then, there’s the obvious question about if some of these posts should even make the transition over.</p>\n\n<p>My first thought is to use PowerShell for everything, but there isn’t a good XML parser utility for PowerShell. So, I had ChatGPT generate some code to parse the WordPress XML output file using a language of its choosing, and it chose Python.</p>\n\n<p>It’s a lot of code, so rather than embed it here, I’ve put it up on GitHub: <a href=\"https://github.com/edwardjensen/wordpress-json-list/blob/main/rewrite-wordpress-export.py\">rewrite-wordpress-export.py</a>.</p>\n\n<p>It seemed to be successful, outputting what I had in mind: the title, the link, and the post date. Here’s an example element:</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n\t</span><span class=\"nl\">\"title\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Friday Five: Updates to A Brief History of Midtown Phoenix\"</span><span class=\"p\">,</span><span class=\"w\">\n\t</span><span class=\"nl\">\"link\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"https://edwardjensen.net/friday-five/friday-five-updates-to-a-brief-history-of-midtown-phoenix/6493/\"</span><span class=\"p\">,</span><span class=\"w\">\n\t</span><span class=\"nl\">\"pubDate\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Fri, 18 Mar 2022 16:30:00 +0000\"</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"err\">,</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>There are a couple of issues here. First, the URL it detected is the original post URL, which is on the <code class=\"language-plaintext highlighter-rouge\">edwardjensen.net</code> domain rather than its new place, <code class=\"language-plaintext highlighter-rouge\">old.edwardjensen.net</code>. Second, the pubDate is a text string, so I need to convert that into something machine-readable. Lastly, I need to add a way to indicate that this post is from the post list, not the list of posts on the new site. This is where a bit of PowerShell comes into play:</p>\n\n<div class=\"language-powershell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kr\">foreach</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">$p</span><span class=\"w\"> </span><span class=\"kr\">in</span><span class=\"w\"> </span><span class=\"nv\">$posts</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nv\">$p</span><span class=\"o\">.</span><span class=\"nf\">link</span><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nv\">$p</span><span class=\"o\">.</span><span class=\"nf\">link</span><span class=\"w\"> </span><span class=\"o\">-replace</span><span class=\"w\"> </span><span class=\"s2\">\"https://edwardjensen.net/\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"https://old.edwardjensen.net/\"</span><span class=\"w\">\n    </span><span class=\"nv\">$p</span><span class=\"o\">.</span><span class=\"nf\">pubDate</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">$p</span><span class=\"o\">.</span><span class=\"nf\">pubDate</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Get-Date</span><span class=\"p\">)</span><span class=\"w\">\n    </span><span class=\"n\">Add-Member</span><span class=\"w\"> </span><span class=\"nt\">-InputObject</span><span class=\"w\"> </span><span class=\"nv\">$p</span><span class=\"w\"> </span><span class=\"nt\">-MemberType</span><span class=\"w\"> </span><span class=\"nx\">NoteProperty</span><span class=\"w\"> </span><span class=\"nt\">-Name</span><span class=\"w\"> </span><span class=\"s2\">\"ejnet\"</span><span class=\"w\"> </span><span class=\"nt\">-Value</span><span class=\"w\"> </span><span class=\"bp\">$true</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>Easy. We’ve transformed the JSON block to something that’s usable:</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n\t</span><span class=\"nl\">\"title\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Friday Five: Updates to A Brief History of Midtown Phoenix\"</span><span class=\"p\">,</span><span class=\"w\">\n\t</span><span class=\"nl\">\"link\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"https://old.edwardjensen.net/friday-five/friday-five-updates-to-a-brief-history-of-midtown-phoenix/6493/\"</span><span class=\"p\">,</span><span class=\"w\">\n\t</span><span class=\"nl\">\"pubDate\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"2022-03-18T09:30:00-07:00\"</span><span class=\"p\">,</span><span class=\"w\">\n\t</span><span class=\"nl\">\"ejnet\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"err\">,</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>Now export the output as a new JSON file, upload it to the _data folder in Jekyll, and we’re in business. Right? There were a couple of hiccups that I found based on the original Python script:</p>\n\n<ol>\n  <li>Jekyll uses <code class=\"language-plaintext highlighter-rouge\">date</code> as the date field, not <code class=\"language-plaintext highlighter-rouge\">pubDate</code> as I used in the Python script. OK, that’s simple to replace - just do a find/replace action to replace <code class=\"language-plaintext highlighter-rouge\">\"pubDate\"</code> with <code class=\"language-plaintext highlighter-rouge\">\"date\"</code> in the JSON file.</li>\n  <li>Similarly, Jekyll uses <code class=\"language-plaintext highlighter-rouge\">\"url\"</code> instead of <code class=\"language-plaintext highlighter-rouge\">\"link\"</code>. Same action with find and replace.</li>\n</ol>\n\n<p>With those out of the way, we’re now in business. Liquid, the templating engine for Jekyll, can do a bit of data analysis. If a post exists on the new blog, I don’t need to have it repeated from the old blog post list. So now, I need to construct an operation to import posts from the new blog, the JSON list from the old blog, and delete duplicates on the JSON list if the post is on the new blog.</p>\n\n<p>This is the liquid I used:</p>\n<div class=\"language-liquid highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">{%</span><span class=\"w\"> </span><span class=\"nt\">assign</span><span class=\"w\"> </span><span class=\"nv\">recent_posts</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nv\">site</span><span class=\"p\">.</span><span class=\"nv\">posts</span><span class=\"w\"> </span><span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span><span class=\"w\"> </span><span class=\"nt\">assign</span><span class=\"w\"> </span><span class=\"nv\">ejnet_posts</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nv\">site</span><span class=\"p\">.</span><span class=\"nv\">data</span><span class=\"p\">.</span><span class=\"nv\">ejnet-posts</span><span class=\"w\"> </span><span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span><span class=\"w\"> </span><span class=\"nt\">assign</span><span class=\"w\"> </span><span class=\"nv\">combined_posts</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nv\">recent_posts</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"nf\">concat</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nv\">ejnet_posts</span><span class=\"w\"> </span><span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span><span class=\"w\"> </span><span class=\"nt\">assign</span><span class=\"w\"> </span><span class=\"nv\">unique_posts</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nv\">combined_posts</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"nf\">uniq</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s1\">'title'</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"nf\">sort</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s1\">'date'</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"nf\">reverse</span><span class=\"w\"> </span><span class=\"cp\">%}</span>\n</code></pre></div></div>\n\n<p><em>Et voilà !</em> The posts are now imported as one list. In the HTML that generates the list, it’s now easy to add. I’ve set up the formatting such that if the post is from the JSON post list, the post title is in <em>italic type</em>. Part of that is to create a visual reference to a post on a different infrastructure, but part of that is also for me as a check for posts that I still need to import over. I’ve found, for instance, that a couple of recent posts didn’t make it over when I ran the original WordPress to Markdown import operation!</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{% if post.ejnet %}\n<span class=\"nt\">&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">\"italic\"</span><span class=\"nt\">&gt;</span>{{ post.title }}<span class=\"nt\">&lt;/span&gt;</span>\n{% else %}\n<span class=\"nt\">&lt;span&gt;</span>{{ post.title }}<span class=\"nt\">&lt;/span&gt;</span>\n{% endif %}\n</code></pre></div></div>\n\n<p>I’ve also added a utility to group posts by each year, sorted from newest to oldest. That’s accomplished, again, using Liquid:</p>\n\n<div class=\"language-liquid highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">{%</span><span class=\"w\"> </span><span class=\"nt\">assign</span><span class=\"w\"> </span><span class=\"nv\">posts_by_year</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nv\">unique_posts</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"nf\">group_by_exp</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"post\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"post.date | date: '%Y'\"</span><span class=\"w\"> </span><span class=\"cp\">%}</span>\n\n<span class=\"cp\">{%</span><span class=\"w\"> </span><span class=\"nt\">for</span><span class=\"w\"> </span><span class=\"nv\">year</span><span class=\"w\"> </span><span class=\"nt\">in</span><span class=\"w\"> </span><span class=\"nv\">posts_by_year</span><span class=\"w\"> </span><span class=\"cp\">%}</span>\n\n<span class=\"cp\">{%</span><span class=\"w\"> </span><span class=\"nt\">for</span><span class=\"w\"> </span><span class=\"nv\">post</span><span class=\"w\"> </span><span class=\"nt\">in</span><span class=\"w\"> </span><span class=\"nv\">year</span><span class=\"p\">.</span><span class=\"nv\">items</span><span class=\"w\"> </span><span class=\"cp\">%}</span>\n</code></pre></div></div>\n\n<p>And that’s how it looks now on the <a href=\"/writing\">edwardjensen.net/writing</a> page.</p>\n\n<p>Because my writing up until 2018 was on central-city Phoenix matters, I’ve added this note at the top of the writing index page:</p>\n\n<blockquote>\n  <p>Post titles with <em>italic type</em> are links to the those posts on the previous version of this blog prior to them being migrated over. NB: Most historical posts from 2011 through 2018 are when I took an acute interest in central-city Phoenix matters, and may not be as relevant today. Still, in the interest of historical completeness, those posts are going to be linked below.</p>\n</blockquote>\n\n<p>I’m looking at a lot of these posts, and while I do stand by them as something I’ve written, some of the posts are mildly cringeworthy. I’m thinking some of them might be left behind in the migration, because they’re just not relevant any longer.</p>\n\n<p>Technically, I’m quite pleased with how this has worked. Check out the GitHub repository for more info: <a href=\"https://github.com/edwardjensen/wordpress-json-list\">edwardjensen/wordpress-json-list</a>.</p>\n\n<p><em>Post header photo based on a photo by <a href=\"https://unsplash.com/@flowforfrank?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash\">Ferenc Almasi</a> from <a href=\"https://unsplash.com/photos/black-and-yellow-printed-paper-HfFoo4d061A?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash\">Unsplash</a></em></p>",
            "summary": "Building out the recent posts list to include direct links to posts on the old blog, while ignoring them if that post exists here",
            "image": "https://www.edwardjensen.net/assets/images/posts/202502-importingoldposts.jpeg",
            "date_published": "2025-02-17T00:00:00+00:00",
            "date_modified": "2025-02-17T00:00:00+00:00",
            "author": {
              "name": ""},
            "tags": ["blogging","Jekyll"]},{
            "id": "https://www.edwardjensen.net/posts/2025/2025-02/something-old-something-new",
            "url": "https://www.edwardjensen.net/posts/2025/2025-02/something-old-something-new",
            "title": "Something old, something new",
            "content_html": "<p>If you’re reading this, then you’re probably seeing this on my re-launched blog. In early February 2025, I began the process to migrate my blog away from WordPress and to a different format. One of the things that I’ve been thinking about lately is making sure I put my content in places I fully control. Social media platforms are ephemeral, and what’s popular one day can be quickly abandoned or coopted the next. If something happens to the presentation of the website, that the content is in markdown files means it’s highly portable from one platform to the next.</p>\n\n<p>Don’t get me wrong: WordPress was a fantastic platform. But it’s not in line with my thinking regarding my content. The process of converting the WordPress files to Markdown was a pain, and it’s something that’s still ongoing. But since everything content on this blog is now a markdown file (or YAML or JSON), the generation software I use becomes irrelevant.</p>\n\n<p>Because I’m sure you’ll ask, here’s what’s under the hood of the new site:</p>\n<ul>\n  <li>The site’s generated by <a href=\"https://jekyllrb.com/\">Jekyll 4.1</a>, which while I know is one of the early static-site generators, works perfectly for what I’m trying to accomplish. I know I can use the hip JavaScript- or React-based generators, but that’s way beyond what I need do to for now.</li>\n  <li>The visual style is accomplished through <a href=\"https://v3.tailwindcss.com/\">Tailwind CSS</a> and <a href=\"https://github.com/alpinejs/alpine\">AlpineJS</a>. For now, I’m using the previous v3 of Tailwind, because the translation layer between Tailwind and Jekyll doesn’t seem to work for Tailwind v4.</li>\n  <li>The static pages are hosted on Cloudflare Pages. The secret weapon is that if the hosting provider returns a 404 error, a bit of code redirects you to the URL you tried to look up but on the previous blog.</li>\n  <li>The site is a GitHub repository, and GitHub Actions runs the site creation nightly, as well as whenever a push to the main repository is made. While you can’t access it, you can see the commit ID for that current build of the site.</li>\n</ul>\n\n<p>Speaking of the previous blog, it’s still up at <a href=\"https://old.edwardjensen.net/\">old.edwardjensen.net</a>. I have paid for hosting for a bit longer, so I’ll keep it up and linked until I’ve moved the content from there to here.</p>\n\n<p>There are, at least as of the publishing date of this post, a few known issues that need to be ironed out.</p>\n<ul>\n  <li>RSS feeds are wonky. For now, <a href=\"https://www.edwardjensen.net/feed.xml\">edwardjensen.net/feed.xml</a> will work. I’m working on adding multiple feeds based on the type of post.</li>\n  <li>There still are a few layout-related issues, especially for mobile devices. I’m 85% happy with things, but it’s that last 15% that will make this feel polished.</li>\n  <li>There isn’t an automatic way to post content automatically to Bluesky or LinkedIn. I might play around with a service like ActivityPub, but that seems <a href=\"https://macwright.com/2022/12/09/activitypub.html\">to be a big lift</a>.</li>\n  <li>For me, I would like to make <a href=\"https://obsidian.md/\">Obsidian</a>, the markdown-based notes app, the CMS for the site. There are some workflows in <a href=\"https://silentvoid13.github.io/Templater/introduction.html\">Obsidian Templater</a> that should make this accomplishable, but that’s a work in progress. Copy-and-paste works just fine for now.</li>\n</ul>\n\n<p>I thought this project would take quite a while to do, but I was able to build the site in about a weekend. OK, that’s all I did for a Saturday and Sunday, but it’s up and ready. I’m seriously excited about the future of this site, and that I’m now able to put my thoughts about content into practice.</p>",
            "summary": "Something old, something new: A new chapter begins for edwardjensen.net",
            "image": "https://www.edwardjensen.net/assets/images/posts/202502-somethingold.jpg",
            "date_published": "2025-02-04T00:00:00+00:00",
            "date_modified": "2025-02-04T00:00:00+00:00",
            "author": {
              "name": ""},
            "tags": ["blogging","blog"]},{
            "id": "https://www.edwardjensen.net/posts/2025/2025-01/happy-new-year-2025",
            "url": "https://www.edwardjensen.net/posts/2025/2025-01/happy-new-year-2025",
            "title": "Happy New Year 2025",
            "content_html": "<p>With warm wishes and high hopes for the New Year 2025, and for peace and certainty in challenging and uncertain times</p>",
            "summary": "With warm wishes and high hopes for the New Year 2025, and for peace and certainty in challenging and uncertain times",
            "image": "https://www.edwardjensen.net/assets/images/posts/202501-happynewyear2025.jpg",
            "date_published": "2025-01-01T00:00:00+00:00",
            "date_modified": "2025-01-01T00:00:00+00:00",
            "author": {
              "name": ""},
            "tags": ["happy-new-year-2025"]},{
            "id": "https://www.edwardjensen.net/posts/2024/2024-12/first-contact-safety-tip",
            "url": "https://www.edwardjensen.net/posts/2024/2024-12/first-contact-safety-tip",
            "title": "First Contact Safety Tip",
            "content_html": "<p>If you have Office 365 email, chances are you or your email admin have turned on the <a href=\"https://learn.microsoft.com/en-us/defender-office-365/anti-phishing-policies-about#first-contact-safety-tip\">First Contact Safety Tip system</a>. This is the system that automatically adds a warning to emails from senders you don’t normally get emails from, saying “You don’t often get email from…”</p>\n\n<p><img src=\"/assets/images/posts/202412-firstcontactexample.jpg\" alt=\"\" /></p>\n\n<p>For those of us who like to automate things, this also puts something in the email headers. Specifically, under the <code class=\"language-plaintext highlighter-rouge\">X-Forefront-Antispam-Report</code> header, it adds a <code class=\"language-plaintext highlighter-rouge\">SFTY:9.25</code> tag.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">X-Forefront-Antispam-Report:   CIP:17.23.6.29;CTRY:US;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:[redacted];PTR:[redacted];CAT:NONE;**SFTY:9.25**;SFS:(13230040)(5073199012)(69100299015)(12012899012)(4076899003)(8096899003);DIR:INB;**SFTY:9.25**;</code></p>\n\n<p>There’s good and bad news to this. The good news is that we can create an Outlook rule on our client email to filter out these emails to a separate folder. The bad news is that the separate folder can’t be the “Other” inbox if you have Focused/Other inboxes enabled.</p>\n\n<p><img src=\"/assets/images/posts/202412-firstcontactrule.jpg\" alt=\"\" /></p>\n\n<p>Add the “Message header includes” condition and set the value to <code class=\"language-plaintext highlighter-rouge\">SFTY:9.25</code>, and then select the folder you want to move the emails to. I’ve created a separate <strong>Inbox – First Contact</strong> folder. (Just remember to check that one periodically!)</p>\n\n<p>This is obviously a bodge job to get around a limitation of Outlook. Hopefully, in the future, they’ll allow us to send emails to the Other inbox as a destination rule.</p>",
            "summary": "If you have Office 365 email, chances are you or your email admin have turned on the First Contact Safety Tip system. This is the system that automatically adds a warning to emails from senders you don’t normally get emails from, saying “You don’t often get email from…”",
            "image": "https://www.edwardjensen.net/assets/images/posts/202412-firstcontactheader.jpg",
            "date_published": "2024-12-30T00:00:00+00:00",
            "date_modified": "2024-12-30T00:00:00+00:00",
            "author": {
              "name": ""},
            "tags": ["email-automation","first-contact-safety-tip","microsoft-outlook","office-365"]},{
            "id": "https://www.edwardjensen.net/posts/2024/2024-11/invoice-fraud",
            "url": "https://www.edwardjensen.net/posts/2024/2024-11/invoice-fraud",
            "title": "Invoice Fraud",
            "content_html": "<p>We’ve seen an uptick lately in <a href=\"https://www.scamwatch.gov.au/about-us/news-and-alerts/scam-alert-fake-business-invoice-scams\">invoice fraud</a> where I work. The formula is thus: Scammers make up an email chain (to create a sense of urgency or legitimacy) and then send that email to someone in accounting within an organization. The goal, obviously, is to trick someone into paying a fake invoice to a scammer.</p>\n\n<p>There are a few signs that the invoice is <a href=\"https://ohiocpa.com/for-the-public/news/2023/08/07/how-to-spot-a-fake-invoice-and-spare-your-organization\">fake</a>. The most common sign is that the invoice comes from a vendor that an organization isn’t working with. Another sign is that the grammar and language syntax seem off. Another big sign is the use of the word “kindly” as a synonym for please–as in <em>‘kindly send this to’</em> or <em>‘kindly direct questions to’</em> or phrases like that. We’ve also found that the invoice is “generated” by a made-up employee of the organization.</p>\n\n<p>To make sure fraudulent invoices are deleted, we’ve found a couple of things that help us. First, check and double check if a vendor is in the organization’s accounting system. If it’s an invoice from a new organization, and there hasn’t been anything to create a relationship between organization and vendor, then there’s a good chance it’s fraud. The other thing is that we send invoices around within the company just in case there are any questions. It’s worked in the past.</p>\n\n<p>It’s a scary world out there. Be careful!</p>",
            "summary": "We’ve seen an uptick lately in invoice fraud where I work. The formula is thus: Scammers make up an email chain (to create a sense of urgency or legitimacy) and then send that email to someone in accounting within an organization. The goal, obviously, is to trick someone into paying a fake invoice to a scammer.",
            "date_published": "2024-11-26T00:00:00+00:00",
            "date_modified": "2024-11-26T00:00:00+00:00",
            "author": {
              "name": ""},
            "tags": ["cybersecurity","invoice-fraud"]},{
            "id": "https://www.edwardjensen.net/posts/2024/2024-11/request-for-podcast",
            "url": "https://www.edwardjensen.net/posts/2024/2024-11/request-for-podcast",
            "title": "Request for Podcast",
            "content_html": "<p>Despite my absence from posting on here, there’s been a lot on my mind lately. Certainly, the results from the recent US elections and the impact that we may be experiencing in 2025 and beyond has been on my mind. There have been people far more equipped and eloquent weighing in on this.</p>\n\n<p>But something else has been on my mind - in fact, for the past decade. This year – 2024 – marks the 10th anniversary of a mini podcast series I did called <em><a href=\"https://edwardjensen.net/dtphxpodcast/\">The Downtown Phoenix Podcast</a></em>. In only eight episodes total, I addressed a number of key issues facing a changing downtown Phoenix in 2014, interviewing diverse voices and bringing new perspectives to the table that usually didn’t get a seat. With apologies to past, current, and future employers, it will be the work I am the proudest to have done.</p>\n\n<p>Despite that series ending, the podcast bug has never left me. Every iteration of a home office I’ve had since then has had provisions for doing another podcast/broadcast project. As I’ve tossed around many thoughts about what something could be, I’ve thought about something regarding nonprofit IT. As much as I say IT is IT, our corner of the IT world is an interesting one and I’m willing to gamble there are some good stories worth sharing.</p>\n\n<p>Consider this post to be me throwing this idea out into the world. Anyone interested in taking part? Or anyone interested in helping find these stories worth sharing?</p>",
            "summary": "Despite my absence from posting on here, there’s been a lot on my mind lately. Certainly, the results from the recent US elections and the impact that we may be experiencing in 2025 and beyond has been on my mind. There have been people far more equipped and eloquent weighing in on this. But something else has been on my mind - in fact, for the past decade. This year – 2024 – marks the 10th anniversary of a mini podcast series I did called The Downtown Phoenix Podcast. In only eight episodes total, I addressed a number of key issues facing a changing downtown Phoenix in 2014, interviewing diverse voices and bringing new perspectives to the table that usually didn’t get a seat. With apologies to past, current, and future employers, it will be the work I am the proudest to have done. Despite that series ending, the podcast bug has never left me. Every iteration of a home office I’ve had since then has had provisions for doing another podcast/broadcast project. As I’ve tossed around many thoughts about what something could be, I’ve thought about something regarding nonprofit IT. As much as I say IT is IT, our corner of the IT world is an interesting one and I’m willing to gamble there are some good stories worth sharing. Consider this post to be me throwing this idea out into the world. Anyone interested in taking part? Or anyone interested in helping find these stories worth sharing?",
            "image": "https://www.edwardjensen.net/assets/images/posts/202411_thenonprofititpodcast.jpg",
            "date_published": "2024-11-20T00:00:00+00:00",
            "date_modified": "2024-11-20T00:00:00+00:00",
            "author": {
              "name": ""},
            "tags": ["the-downtown-phoenix-podcast"]},{
            "id": "https://www.edwardjensen.net/posts/2024/2024-01/happy-new-year-2024",
            "url": "https://www.edwardjensen.net/posts/2024/2024-01/happy-new-year-2024",
            "title": "Happy New Year 2024",
            "content_html": "<p><img src=\"/assets/images/posts/202401_NewYear2024.jpeg\" alt=\"\" /></p>\n\n<p>With warm wishes and high hopes for a happy New Year 2024</p>",
            "summary": "",
            "image": "https://www.edwardjensen.net/assets/images/posts/202401_NewYear2024.jpeg",
            "date_published": "2024-01-01T00:00:00+00:00",
            "date_modified": "2024-01-01T00:00:00+00:00",
            "author": {
              "name": ""},
            "tags": []},{
            "id": "https://www.edwardjensen.net/posts/2023/2023-12/papercut-mf-badge-scanning",
            "url": "https://www.edwardjensen.net/posts/2023/2023-12/papercut-mf-badge-scanning",
            "title": "PaperCut MF badge scanning",
            "content_html": "<p>As part of a recent IT upgrade, I rebuilt our entire printing infrastructure. There were some issues with how it was previously built, so this was a good time to start from scratch. One of the issues was our PaperCut MF installation, of which I’ve <a href=\"https://edwardjensen.net/tech/five-things-for-papercut-hive/6608/\">documented our challenges</a> <a href=\"https://edwardjensen.net/tech/sometimes-we-get-it-wrong/6656/\">on this blog this year</a>.</p>\n\n<p>We use the badge scanning feature of PaperCut on our two copiers for secure print release and accounting purposes. (It also helps me make the case to those who want a personal printer that they don’t need one!) But I found that the badge format might produce a different format than what you’re expecting.</p>\n\n<p>The setting is buried in the Config Editor (Options &gt; Config Editor) as <code class=\"language-plaintext highlighter-rouge\">ext-device.card-no-converter</code>. Here are the various values:</p>\n\n<ul>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">ascii-enc</code>: Unpacks an ASCII-encoded card value</p>\n  </li>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">hex2dec</code>: Converts hexadecimal (base-16) to decimal (base-10)</p>\n  </li>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">dec2hex</code>: Converts decimal to hexadecimal</p>\n  </li>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">javascript:[path]</code> - At the path provided, uses a selected JavaScript code to convert a card’s read value into something else.</p>\n  </li>\n</ul>\n\n<p>Hopefully this will help someone working through a new PaperCut MF installation. I’ll write more later about some of the things I’ve learned from rebuilding out PaperCut.</p>",
            "summary": "As part of a recent IT upgrade, I rebuilt our entire printing infrastructure. There were some issues with how it was previously built, so this was a good time to start from scratch. One of the issues was our PaperCut MF installation, of which I’ve documented our challenges on this blog this year.",
            "image": "https://www.edwardjensen.net/assets/images/posts/202312_papercutcard.jpg",
            "date_published": "2023-12-22T00:00:00+00:00",
            "date_modified": "2023-12-22T00:00:00+00:00",
            "author": {
              "name": ""},
            "tags": ["papercut"]},{
            "id": "https://www.edwardjensen.net/posts/2023/2023-11/friday-five-email-security-updates",
            "url": "https://www.edwardjensen.net/posts/2023/2023-11/friday-five-email-security-updates",
            "title": "Friday Five: Email Security Improvements",
            "content_html": "<p>Earlier this week, I wrote about a new email phishing tactic I’ve been seeing in my environment - <a href=\"/posts/2023/2023-10/qr-code-phishing\">bad actors are trying to get users to scan a QR code on their phones in an attempt to defeat any filtering or security measures that might be on a corporate computer</a>. That got me thinking about what are some things that we can do as IT practitioners to help our users make informed decisions?</p>\n\n<p>This isn’t going to be a typical security-related essay. I’m not going to focus on five things IT administrators can do or five things for our users to do to bolster security. While implementing technical blocks and controls are certainly important, in this world where working remotely is almost expected, educating our users and giving them tools to make security-conscious decisions is going to be way more important.</p>\n\n<p>One last thing: This is going to be heavily geared toward Microsoft 365. If you use other platforms for email, some of these tools may be available, but your mileage may vary.</p>\n\n<p><strong>1. Be skeptical of any communications you weren’t expecting.</strong> I can’t remember how many times I have said to people something like this: “Don’t click links, download attachments, [and now scan QR codes] or do anything with emails you weren’t expecting to receive.” It’s probably way overdue to have a zero-trust mentality with email (assume nothing is, by default, deserving of trust), but I guess here we are.</p>\n\n<p><strong>2. Email admins should enable some sort of external email flag. And while you’re at it: Enable the First Contact Safety Tip as well.</strong> In the Exchange Admin Center, you can modify emails such that a bit of custom HTML can be put at the top. When coupled with a rule to apply to messages sent from outside the organization, this can be a useful banner <a href=\"https://adamtheautomator.com/external-email-warning/\">to alert senders that an email is from outside of their organization</a>. While I used to be somewhat skeptical about that, just seeing it as a bit of safety theater, with the rise in these different phishing attempts, I see it as a useful tool. Coupled with <a href=\"https://learn.microsoft.com/en-us/microsoft-365/security/office-365-security/anti-phishing-policies-about?view=o365-worldwide#first-contact-safety-tip\">Defender’s First Contact Safety Tip</a>, these two tools can work in concert to give users information to assess for themselves if an email is truly valid. “Why would an email from our CEO be coming from an external user and an email I’ve not seen before? Hmm… that must be a fraudulent email.”</p>\n\n<p><strong>3. Have users report spam and phishing emails using Outlook’s spam and phishing reporting tools.</strong> My biggest gripe about Microsoft Outlook on Windows is that it’s not easy to report spam or phishing emails as it is on Outlook for mobile, on the web, or for macOS. But do make your users report bad emails as such, because that helps everyone.</p>\n\n<p><strong>4. Enable Microsoft 365’s safe links and safe attachments features of Microsoft Defender.</strong> While also not a perfect catch-all, enabling Microsoft 365 Safe Links and Safe Attachments can help mitigate some attacks. If a user clicks on a link they shouldn’t have, that attack may be stopped in its tracks. But that’s also why these QR code attacks are so devilishly clever: it removes that defense mechanism from the chain. Now do you know why IT security people can’t really sleep at night?</p>\n\n<p><strong>5. Educate all users to use their company email for anything company-related - leave the personal email for personal matters.</strong> This might be the biggest one. It’s just a good idea to do this, because you’re now able to put better mechanisms in place to deflect possible spoofing attacks or worry about your colleagues storing information on things you don’t have control over. Plus, it’s helpful for data retention policies.</p>\n\n<p>The last thing, and this is an essay in its own right, is that as IT professionals, especially in the nonprofit context, we have to be serious about security. But in being serious about security, we have to understand that our users need to do things for the mission, and IT can’t be what stops that. I’m not saying that we need to abandon our core principles as IT practitioners, <em>especially</em> when it comes to security, but we need to find a way to get from no to yes.</p>\n\n<p>Aren’t our jobs fun?</p>",
            "summary": "\"In today’s Friday Five: Some thoughts for IT administrators on giving tools to their users to make security-conscious decisions\"",
            "image": "https://www.edwardjensen.net/assets/images/posts/202310_QRCodePhishingHeader.jpg",
            "date_published": "2023-11-03T00:00:00+00:00",
            "date_modified": "2023-11-03T00:00:00+00:00",
            "author": {
              "name": ""},
            "tags": ["cybersecurity","friday-five"]},{
            "id": "https://www.edwardjensen.net/posts/2023/2023-10/qr-code-phishing",
            "url": "https://www.edwardjensen.net/posts/2023/2023-10/qr-code-phishing",
            "title": "QR code phishing",
            "content_html": "<p>I’ve been seeing a lot of QR code phishing attempts lately. If you’ve not seen the tactic in your environments, the recipient receives an email, and it asks them to scan a QR code on their phone to authenticate and open the link. Here’s a sample email I received from a colleague in my environment:</p>\n\n<p><img src=\"/assets/images/posts/202310_samplephishingemail-1024x974.jpg\" alt=\"\" /></p>\n\n<p>The image is the email, except I’ve blurred the QR code and censored out personal information in the email. And, honestly, this is quite a clever mechanism. Attackers know that there are most likely security mechanisms on company-owned and -managed computers that would block this going anywhere. But those security tools aren’t on our colleagues’ phones.</p>\n\n<p>Being curious, I decided to check out where this QR code led. Now before you throw your computers across the room and scream at me for needlessly compromising my own environment, I uploaded the QR code image to a <a href=\"https://webqr.com/\">QR code web service</a> and got the plain text version of that code. Nobody was hurt in the process. If someone scanned the QR code, here’s the initial site they would have gone to (with some elements of the URL changed to anonymize this):</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>https://doportal.documentmailbox.com/RedirectTarget.aspx?Action=EmailRedirect&amp;BrandingID=ConEdison&amp;IdToken=[guid]&amp;CheckSum=[checksum]&amp;TargetUrl=https://super-firefly-8102.on.fleek.co/#[user email address]\n</code></pre></div></div>\n\n<p>The first URL is to a service called documentmailbox.com. That seems to be a legitimate service, but attackers have compromised their APIs to allow redirects to other URLs. We’ve seen that with <a href=\"https://www.verifythis.com/article/news/verify/scams-verify/scammers-hackers-can-send-phishing-links-through-docusign-emails-with-hyperlinks-in-files/536-df42cf2d-9129-426b-b537-c0655bfc1701\">services like DocuSign in the past</a>. DocuSign’s going to be a valid URL to make it through web filtering in a corporate environment, but super-spammy-site.biz is probably not going to make it through.</p>\n\n<p>After a bit of other stuff, the target URL is hosted by a service called Fleek. Fleek is a service that claims to host websites using “decentralized” and “censorship-free” Web3 protocols, so of course it’s going to be used by bad actors. <em>(Ed. note: we know you don’t like Web3, so save that for later.)</em></p>\n\n<p>There have been some great write-ups on this exact service being used for phishing attacks similar to this. Over on SystemWeakness.com, <a href=\"https://systemweakness.com/phishing-on-fleek-investigating-phishing-pages-that-abuse-fleek-c7e0df8a2cd7\">Lena has done a fantastic analysis of where these URLs go</a>. And of course, because Web3 is about resisting censorship, there’s no way to report to this hosting company that their site is being used for bad. I’m not going to speculate that this is by design… <em>(Eds.: …)</em></p>\n\n<p>Anyway, what are some things we can do to manage this style of threat? Obviously, the first thing is to tell anyone in your environment that scanning a QR code in an email to access something is not standard practice. If it is standard practice in your environment, then stop! There’s no legitimate reason why you need to authenticate in this way to share information to your users.</p>\n\n<p>As for technical and administrative blocks, this one’s hard to assess. According to the summary email headers, the email was sent on behalf of someone. That’s not really a reason to block an email. The original email is from a .co.jp domain, so perhaps you could create a <a href=\"https://answers.microsoft.com/en-us/msoffice/forum/all/blocking-emails-sent-from-foreign-countries/a2906df4-49d2-4a1d-8511-da9ee9f10516#:~:text=Login%20to%20https%3A%2F%2Fadmin.microsoft.com%2F%20,Screenshot%20for%20your%20reference\">mail transport rule to send emails from some TLDs you don’t often see</a> to send them to your users’ junk email folders. But that’s a policy decision that IT administrators would have to make with their respective risk management teams.</p>",
            "summary": "I’ve been seeing a lot of QR code phishing attempts lately. If you’ve not seen the tactic in your environments, the recipient receives an email, and it asks them to scan a QR code on their phone to authenticate and open the link. Here’s a sample email I received from a colleague in my environment:",
            "image": "https://www.edwardjensen.net/assets/images/posts/202310_QRCodePhishingHeader.jpg",
            "date_published": "2023-10-31T00:00:00+00:00",
            "date_modified": "2023-10-31T00:00:00+00:00",
            "author": {
              "name": ""},
            "tags": ["phishing","qr-codes","security-awareness"]}]
}